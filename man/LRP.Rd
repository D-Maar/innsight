% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LRP.R
\name{LRP}
\alias{LRP}
\title{Layer-wise Relevance Propagation (LRP) method}
\usage{
LRP(analyzer, data, rule_name = "simple", rule_param = NULL)
}
\arguments{
\item{analyzer}{An instance of the R6 class \code{\link{Analyzer}}.}

\item{data}{Either a matrix or a data frame, where each row must describe an
input to the network.}

\item{rule_name}{The name of the rule, with which the relevance scores are
calculated. Implemented are \code{"simple"}, \code{"eps"}, \code{"ab"},
\code{"ww"} (default: \code{"simple"}).}

\item{rule_param}{The parameter of the selected rule. Note: Only the rules
\code{"eps"} and \code{"ab"} take use of the parameter. Use the default
value \code{NULL} for the default parameters ("eps" : \eqn{0.01}, "ab" : \eqn{0.5}).}
}
\value{
It returns a list of matrices of shape \emph{(in, out)},
which contains the relevance scores for each input variable to the
output predictions or single output class (if \code{out_class} is not \code{NULL})
for every input in \code{data}.
}
\description{
This is an implementation of the \emph{Layer-wise Relevance Propagation (LRP)}
algorithm introduced by Bach et al. (2015). It's a local method for
interpreting a single element of the dataset and returns the relevance scores for
each input feature. The basic idea of this method is to decompose the
prediction score of the model with respect to the input features, i.e.
\deqn{f(x) = \sum_i R(x_i).}
Because of the bias vector, this decomposition is generally an approximation.
There exist several propagation rules to determine the relevance scores. In this
package are implemented: \code{\link{linear_simple_rule}},
\code{\link{linear_eps_rule}}, \code{\link{linear_ab_rule}},
\code{\link{linear_ww_rule}}.
}
\examples{
library(neuralnet)
data(iris)
nn <- neuralnet( Species ~ .,
                 iris, linear.output = FALSE,
                 hidden = c(10,8), act.fct = "tanh", rep = 1, threshold = 0.5)
# create an analyzer for this model
analyzer = Analyzer$new(nn)

# calculate relevance scores for the whole dataset
result <- LRP(analyzer, data = iris[,-5], rule_name = "simple")
plot(result)

# calculate relevance scores for the whole dataset with eps-rule (eps = 0.1)
result <- LRP(analyzer, data = iris[,-5], rule_name = "eps", rule_param = 0.1)
plot(result)

}
\references{
S. Bach et al. (2015) \emph{On pixel-wise explanations for non-linear
classifier decisions by layer-wise relevance propagation.} PLoS ONE 10, p. 1-46
}
\seealso{
\code{\link{Analyzer}},
\code{\link{linear_simple_rule}},
\code{\link{linear_eps_rule}}, \code{\link{linear_ab_rule}},
\code{\link{linear_ww_rule}}, \link{plot.LRP}
}
