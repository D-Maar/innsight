% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LRP.R
\name{LRP}
\alias{LRP}
\title{Layer-wise Relevance Propagation (LRP)}
\description{
This is an implementation of the \emph{Layer-wise Relevance Propagation
(LRP)} algorithm introduced by Bach et al. (2015). It's a local method for
interpreting a single element of the dataset and calculates the relevance
scores for each input feature to the model output. The basic idea of this
method is to decompose the prediction score of the model with respect to
the input features, i.e.
\deqn{f(x) = \sum_i R(x_i).}
Because of the bias vector that absorbs some relevance, this decomposition
is generally an approximation. There exist several propagation rules to
determine the relevance scores. In this package are implemented: simple
rule ("simple"), epsilon rule ("epsilon") and alpha-beta rule
("alpha_beta").
}
\examples{
\dontshow{if (torch::torch_is_installed()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
 #----------------------- Example 1: Torch ----------------------------------
library(torch)

# Create nn_sequential model and data
model <- nn_sequential(
  nn_linear(5, 12),
  nn_relu(),
  nn_linear(12, 2),
  nn_softmax(dim = 2)
)
data <- torch_randn(25, 5)

# Create Converter
converter <- Converter$new(model, input_dim = c(5))

# Apply method LRP with simple rule (default)
lrp <- LRP$new(converter, data)

# Print the result as an array for data point one and two
lrp$get_result()[1:2,,]

# Plot the result for both classes
plot(lrp, output_idx = 1:2)

# Plot the boxplot of all datapoints without preprocess function
boxplot(lrp, output_idx = 1:2, preprocess_FUN = identity)

# ------------------------- Example 2: Neuralnet ---------------------------
library(neuralnet)
data(iris)
nn <- neuralnet(Species ~ .,
  iris,
  linear.output = FALSE,
  hidden = c(10, 8), act.fct = "tanh", rep = 1, threshold = 0.5
)
# create an converter for this model
converter <- Converter$new(nn)

# create new instance of 'LRP'
lrp <- LRP$new(converter, iris[, -5], rule_name = "simple")

# get the result as an array for data point one and two
lrp$get_result()[1:2,,]

# get the result as a torch tensor for data point one and two
lrp$get_result(type = "torch.tensor")[1:2]

# use the alpha-beta rule with alpha = 2
lrp <- LRP$new(converter, iris[, -5],
  rule_name = "alpha_beta",
  rule_param = 2
)

# include the last activation into the calculation
lrp <- LRP$new(converter, iris[, -5],
  rule_name = "alpha_beta",
  rule_param = 2,
  ignore_last_act = FALSE
)

# Plot the result for all classes
plot(lrp, output_idx = 1:3)

# Plot the Boxplot for the first class
boxplot(lrp)

# You can also create an interactive plot with plotly.
# This is a suggested package, so make sure that it is installed
library(plotly)

# Result as boxplots
boxplot(lrp, as_plotly = TRUE)

# Result of the second data point
plot(lrp, data_idx = 2, as_plotly = TRUE)

# ------------------------- Example 3: Keras -------------------------------
library(keras)

if (is_keras_available()) {
  data <- array(rnorm(10 * 60 * 3), dim = c(10, 60, 3))

  model <- keras_model_sequential()
  model \%>\%
    layer_conv_1d(
      input_shape = c(60, 3), kernel_size = 8, filters = 8,
      activation = "softplus", padding = "valid"
    ) \%>\%
    layer_conv_1d(
      kernel_size = 8, filters = 4, activation = "tanh",
      padding = "same"
    ) \%>\%
    layer_conv_1d(
      kernel_size = 4, filters = 2, activation = "relu",
      padding = "valid"
    ) \%>\%
    layer_flatten() \%>\%
    layer_dense(units = 64, activation = "relu") \%>\%
    layer_dense(units = 16, activation = "relu") \%>\%
    layer_dense(units = 3, activation = "softmax")

  # Convert the model
  converter <- Converter$new(model)

  # Apply the LRP method with the epsilon rule and eps = 0.1
  lrp_eps <- LRP$new(converter, data,
    channels_first = FALSE,
    rule_name = "epsilon",
    rule_param = 0.1
  )

  # Plot the result for the first datapoint and all classes
  plot(lrp_eps, output_idx = 1:3)

  # Plot the result as boxplots for first two classes
  boxplot(lrp_eps, output_idx = 1:2)

  # You can also create an interactive plot with plotly.
  # This is a suggested package, so make sure that it is installed
  library(plotly)

  # Result as boxplots
  boxplot(lrp_eps, as_plotly = TRUE)

  # Result of the second data point
  plot(lrp_eps, data_idx = 2, as_plotly = TRUE)
}
\dontshow{\}) # examplesIf}
}
\references{
S. Bach et al. (2015) \emph{On pixel-wise explanations for non-linear
classifier decisions by layer-wise relevance propagation.} PLoS ONE 10,
p. 1-46
}
\seealso{
Other methods: 
\code{\link{ConnectionWeights}},
\code{\link{DeepLift}},
\code{\link{Gradient}},
\code{\link{SmoothGrad}}
}
\concept{methods}
\section{Super class}{
\code{\link[innsight:InterpretingMethod]{innsight::InterpretingMethod}} -> \code{LRP}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{rule_name}}{The name of the rule with which the relevance scores
are calculated. Implemented are \code{"simple"}, \code{"epsilon"},
\code{"alpha_beta"} (default: \code{"simple"}).}

\item{\code{rule_param}}{The parameter of the selected rule.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{LRP$new()}}
\item \href{#method-plot}{\code{LRP$plot()}}
\item \href{#method-boxplot}{\code{LRP$boxplot()}}
\item \href{#method-clone}{\code{LRP$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="innsight" data-topic="InterpretingMethod" data-id="get_result">}\href{../../innsight/html/InterpretingMethod.html#method-get_result}{\code{innsight::InterpretingMethod$get_result()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new instance of the \emph{LRP} method. When initialized,
the method is applied to the given data and the results are stored in
the field \code{result}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LRP$new(
  converter,
  data,
  channels_first = TRUE,
  output_idx = NULL,
  ignore_last_act = TRUE,
  rule_name = "simple",
  rule_param = NULL,
  dtype = "float"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{converter}}{An instance of the \code{Converter} class that includes the
torch-converted model and some other model-specific attributes. See
\code{\link{Converter}} for details.}

\item{\code{data}}{The data to which the method is to be applied. These must
have the same format as the input data of the passed model to the
converter object. This means either
\itemize{
\item an \code{array}, \code{data.frame}, \code{torch_tensor} or array-like format of
size \emph{(batch_size, dim_in)}, if e.g.the model has only one input layer, or
\item a \code{list} with the corresponding input data (according to the
upper point) for each of the input layers.
}}

\item{\code{channels_first}}{The channel position of the given data (argument
\code{data}). If \code{TRUE}, the channel axis is placed at the second position
between the batch size and the rest of the input axes, e.g.
\code{c(10,3,32,32)} for a batch of ten images with three channels and a
height and width of 32 pixels. Otherwise (\code{FALSE}), the channel axis
is at the last position, i.e. \code{c(10,32,32,3)}. If the data
has no channel axis, use the default value \code{TRUE}.}

\item{\code{output_idx}}{These indices specify the output nodes for which
the method is to be applied. In order to allow models with multiple
output layers, there are the following possibilities to select
the indices of the output nodes in the individual output layers:
\itemize{
\item A \code{vector} of indices: If the model has only one output layer,
the values correspond to the indices of the output nodes, e.g.
\code{c(1,3,4)} for the first, third and fourth output node. If there are
multiple output layers, the indices of the output nodes from the first
output layer are considered.
\item A \code{list} of \code{vectors} of indices: If the method is to be
applied to output nodes from different layers, a list can be passed
that specifies the desired indices of the output nodes for each
output layer. Unwanted output layers have the entry \code{NULL} instead of
a vector of indices, e.g. \code{list(NULL, c(1,3))} for the first and
third output node in the second output layer.
\item \code{NULL} (default): The method is applied to all output nodes in
the first output layer but is limited to the first ten as the
calculations become more computationally expensive for more output
nodes.
}}

\item{\code{ignore_last_act}}{Set this logical value to include the last
activation functions for each output layer, or not (default: \code{TRUE}).
In practice, the last activation (especially for softmax activation) is
often omitted.}

\item{\code{rule_name}}{The name of the rule, with which the relevance scores
are calculated. Implemented are \code{"simple"}, \code{"epsilon"},
\code{"alpha_beta"} (default: \code{"simple"}).}

\item{\code{rule_param}}{The parameter of the selected rule. Note: Only the
rules \code{"epsilon"} and \code{"alpha_beta"} take use of the
parameter. Use the default value \code{NULL} for the default parameters
("epsilon" : \eqn{0.01}, "alpha_beta" : \eqn{0.5}).}

\item{\code{dtype}}{The data type for the calculations. Use
either \code{'float'} for \link[torch:torch_dtype]{torch::torch_float} or \code{'double'} for
\link[torch:torch_dtype]{torch::torch_double}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new instance of the R6 class \code{'LRP'}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\if{latex}{\out{\hypertarget{method-plot}{}}}
\subsection{Method \code{plot()}}{
This method visualizes the result of individual data points of the
selected method and enables a visual in-depth investigation with the
help of the S4 classes \code{\link{innsight_ggplot2}} and \code{\link{innsight_plotly}}.\cr
You can use the argument \code{data_idx} to select the data points in the
given data for the plot. In addition, the individual output nodes for
the plot can be selected with the argument \code{output_idx}. The different
results for the selected data points and outputs are visualized using
the ggplot2-based S4 class \code{innsight_ggplot2}. You can also use the
\code{as_plotly} argument to generate an interactive plot with
\code{innsight_plotly} based on the plot function \link[plotly:plot_ly]{plotly::plot_ly}. For
more information and the whole bunch of possibilities, see
\code{\link{innsight_ggplot2}} and \code{\link{innsight_plotly}}.\cr
\cr
\strong{Note:}
\enumerate{
\item For the interactive plotly-based plots, the suggested package
\code{plotly} is required.
\item The ggplot2-based plots for models with multiple input layers are
a bit more complex, therefore the suggested packages \code{'grid'},
\code{'gridExtra'} and \code{'gtable'} must be installed in your R session.
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LRP$plot(
  data_idx = 1,
  output_idx = NULL,
  aggr_channels = "sum",
  as_plotly = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_idx}}{An integer vector containing the numbers of the data
points whose result is to be plotted, e.g. \code{c(1,3)} for the first
and third data point in the given data. Default: \code{1}.}

\item{\code{output_idx}}{The indices of the output nodes for which the
results is to be plotted. This can be either a \code{vector} of indices or
a \code{list} of vectors of indices but must be a subset of the indices
for which the results were calculated, i.e. a subset of \code{output_idx}
from the initialization \code{new()} (see argument \code{output_idx} in method
\code{new()} of this R6 class for details). By default (\code{NULL}), the
smallest index of all calculated output nodes and output layers is used.}

\item{\code{aggr_channels}}{Pass one of \code{'norm'}, \code{'sum'}, \code{'mean'} or a
custom function to aggregate the channels, e.g. the maximum
(\link[base:Extremes]{base::max}) or minimum (\link[base:Extremes]{base::min}) over the channels or only
individual channels with \code{function(x) x[1]}. By default (\code{'sum'}),
the sum of all channels is used.\cr
\emph{Note:} This argument is used only for 2D and 3D input data.}

\item{\code{as_plotly}}{This logical value (default: \code{FALSE}) can be used to
create an interactive plot based on the library \code{plotly}
(see \code{\link{innsight_plotly}} for details).\cr
\emph{Note:} Make sure that the suggested package \code{plotly} is installed
in your R session.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns either an \code{\link{innsight_ggplot2}} (\code{as_plotly = FALSE}) or an
\code{\link{innsight_plotly}} (\code{as_plotly = TRUE}) object with the plotted
individual results.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-boxplot"></a>}}
\if{latex}{\out{\hypertarget{method-boxplot}{}}}
\subsection{Method \code{boxplot()}}{
This method visualizes the results of the selected method summarized as
boxplots and enables a visual in-depth investigation of the global
behavior with the help of the S4 classes \code{\link{innsight_ggplot2}} and
\code{\link{innsight_plotly}}.\cr
You can use the argument \code{output_idx} to select the individual output
nodes for the plot. For tabular and 1D data, boxplots are created in
which a reference value can be selected from the data using the
\code{ref_data_idx} argument. For images, only the pixel-wise median is
visualized due to the complexity. The plot is generated using the
ggplot2-based S4 class \code{innsight_ggplot2}. You can also use the
\code{as_plotly} argument to generate an interactive plot with
\code{innsight_plotly} based on the plot function \link[plotly:plot_ly]{plotly::plot_ly}. For
more information and the whole bunch of possibilities, see
\code{\link{innsight_ggplot2}} and \code{\link{innsight_plotly}}.\cr \cr
\strong{Note:}
\enumerate{
\item For the interactive plotly-based plots, the suggested package
\code{plotly} is required.
\item The ggplot2-based plots for models with multiple input layers are
a bit more complex, therefore the suggested packages \code{'grid'},
\code{'gridExtra'} and \code{'gtable'} must be installed in your R session.
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LRP$boxplot(
  output_idx = NULL,
  data_idx = "all",
  ref_data_idx = NULL,
  aggr_channels = "sum",
  preprocess_FUN = abs,
  as_plotly = FALSE,
  individual_data_idx = NULL,
  individual_max = 20
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{output_idx}}{The indices of the output nodes for which the
results is to be plotted. This can be either a \code{vector} of indices
or a \code{list} of vectors of indices but must be a subset of the indices
for which the results were calculated, i.e. a subset of \code{output_idx}
from the initialization \code{new()} (see argument \code{output_idx} in method
\code{new()} of this R6 class for details). By default (\code{NULL}), the
smallest index of all calculated output nodes and output layers is used.}

\item{\code{data_idx}}{By default ("all"), all available data points are used
to calculate the boxplot information. However, this parameter can be
used to select a subset of them by passing the indices. E.g. with
\code{c(1:10, 25, 26)} only the first 10 data points and
the 25th and 26th are used to calculate the boxplots.}

\item{\code{ref_data_idx}}{This integer number determines the index for the
reference data point. In addition to the boxplots, it is displayed in
red color and is used to compare an individual result with the summary
statistics provided by the boxplot. With the default value (\code{NULL})
no individual data point is plotted. This index can be chosen with
respect to all available data, even if only a subset is selected with
argument \code{data_idx}.\cr
\emph{Note:} Because of the complexity of 2D inputs, this argument is used
only for tabular and 1D inputs and disregarded for 2D inputs.}

\item{\code{aggr_channels}}{Pass one of \code{'norm'}, \code{'sum'}, \code{'mean'} or a
custom function to aggregate the channels, e.g. the maximum
(\link[base:Extremes]{base::max}) or minimum (\link[base:Extremes]{base::min}) over the channels or only
individual channels with \code{function(x) x[1]}. By default (\code{'sum'}),
the sum of all channels is used.\cr
\emph{Note:} This argument is used only for 2D and 3D input data.}

\item{\code{preprocess_FUN}}{This function is applied to the method's result
before calculating the boxplots or medians. Since positive and negative values
often cancel each other out, the absolute value (\code{abs}) is used by
default. But you can also use the raw results (\code{identity}) to see the
results' orientation, the squared data (\code{function(x) x^2}) to weight
the outliers higher or any other function.}

\item{\code{as_plotly}}{This logical value (default: \code{FALSE}) can be used to
create an interactive plot based on the library \code{plotly}
(see \code{\link{innsight_plotly}} for details).\cr
\emph{Note:} Make sure that the suggested package \code{plotly} is installed
in your R session.}

\item{\code{individual_data_idx}}{Only relevant for a \code{plotly} plot with tabular
or 1D inputs! This integer vector of data indices determines
the available data points in a dropdown menu, which are drawn in
individually analogous to \code{ref_data_idx} only for more data points.
With the default value \code{NULL} the first \code{individual_max} data points
are used.\cr
\emph{Note:} If \code{ref_data_idx} is specified, this data point will be
added to those from \code{individual_data_idx} in the dropdown menu.}

\item{\code{individual_max}}{Only relevant for a \code{plotly} plot with tabular or
1D inputs! This integer determines the maximum number of
individual data points in the dropdown menu without counting
\code{ref_data_idx}. This means that if \code{individual_data_idx} has more
than \code{individual_max} indices, only the first \code{individual_max} will
be used. A too high number can significantly increase the runtime.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns either an \code{\link{innsight_ggplot2}} (\code{as_plotly = FALSE}) or an
\code{\link{innsight_plotly}} (\code{as_plotly = TRUE}) object with the plotted
summarized results.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LRP$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
