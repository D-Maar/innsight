% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GradienBased.R
\name{Gradient}
\alias{Gradient}
\title{Gradient Method}
\description{
This method computes the gradients (also known as Vanilla Gradients) of
the outputs with respect to the input variables, i.e. for all input
variable \eqn{i} and output class \eqn{j}
\deqn{d f(x)_j / d x_i.}
If the argument \code{times_input} is \code{TRUE}, the gradients are multiplied by
the respective input value (Gradient x Input), i.e.
\deqn{x_i * d f(x)_j / d x_i.}
}
\examples{
library(neuralnet)
data(iris)

# Train a neural network
nn <- neuralnet(Species ~ ., iris,
  linear.output = FALSE,
  hidden = c(10, 5),
  act.fct = "logistic",
  rep = 1
)

# Convert the trained model
converter <- Converter$new(nn)

# Calculate the gradients
gradient <- Gradient$new(converter, iris[, -5], times_input = FALSE)

# Plot the result for the first and 60th data point and all classes
# plot(gradient, data_id = c(1, 60), class_id = 1:3)

# Calculate Gradients x Input and do not ignore the last activation
gradient <- Gradient$new(converter, iris[, -5], ignore_last_act = FALSE)

# Plot the result again
# plot(gradient, data_id = c(1, 60), class_id = 1:3)
}
\section{Super classes}{
\code{\link[innsight:InterpretingMethod]{innsight::InterpretingMethod}} -> \code{\link[innsight:GradientBased]{innsight::GradientBased}} -> \code{Gradient}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Gradient$new()}}
\item \href{#method-clone}{\code{Gradient$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="innsight" data-topic="InterpretingMethod" data-id="get_result">}\href{../../innsight/html/InterpretingMethod.html#method-get_result}{\code{innsight::InterpretingMethod$get_result()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new instance of this class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gradient$new(
  converter,
  data,
  channels_first = TRUE,
  dtype = "float",
  ignore_last_act = TRUE,
  times_input = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{converter}}{The converter of class \link{Converter} with the stored
and torch-converted model.}

\item{\code{data}}{The given data in an array-like format to be interpreted
with the this method.}

\item{\code{channels_first}}{The format of the given data, i.e. channels on
last dimension (\code{FALSE}) or after the batch dimension (\code{TRUE}). If the
data has no channels, use the default value \code{TRUE}.}

\item{\code{dtype}}{The type of the data (either \code{'float'} or \code{'double'}).
Default: \code{'float'}.}

\item{\code{ignore_last_act}}{A boolean value to include the last
activation into all the calculations, or not. In some cases, the
last activation leads to a saturation problem. Default: \code{TRUE}.}

\item{\code{times_input}}{Multiplies the gradients with the input features.
This method is called 'Gradient x Input'. Default: \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Gradient$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
