% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Layer_other.R
\name{flatten_layer}
\alias{flatten_layer}
\title{Torch implementation of a flatten layer}
\usage{
flatten_layer(dim_in, dim_out)
}
\arguments{
\item{dim_in}{The input dimensions of the flatten layer}

\item{dim_out}{The output dimensions of the flatten layer}
}
\description{
This \code{torch::nn_module} implements a flatten layer. It takes an
input of dimension \emph{(batch_size, in_channels, dim_1, ..., dim_n)} and flattens
it to an output of dimensions \emph{(batch_size, in_channels * dim_in * ... * features_n)}.
Note that in this package all data is transformed into the data format \code{channels_first}, so
before flattening the transformation must be undone.
}
\section{Attributes}{

\describe{
\item{\code{self$input_dim}}{Dimension of the input without batch dimension}
\item{\code{self$input}}{The last recorded input for this layer}
\item{\code{self$input_ref}}{The last recorded reference input for this layer}
\item{\code{self$output_dim}}{The dimension of the flattened input}
\item{\code{self$output}}{The last recorded output of this layer, i.e. the flattened input}
\item{\code{self$output_ref}}{The last recored reference output of this layer}
\item{\code{self$channels_first}}{Boolean that determines whether to unroll values
beginning at the last layer with \code{TRUE} or at the first layer with \code{FALSE}}
}
}

\section{\code{self$forward()}}{

This function takes the input and forwards it through the layer, updating the layer's output
\subsection{Usage}{

\code{self(x, channels_first = TRUE)}
}

\subsection{Arguments}{

\describe{
\item{\code{x}}{The input of dimension \emph{(batch_size, in_channels, dim_1, ..., dim_n)}}
\item{\code{channels_first}}{Boolean that determines whether the data format is
\code{channels_first} or \code{channels_last} (default: \code{TRUE})}
}
}

\subsection{Return}{

Returns the output of the forward pass, of dimensions \emph{(batch_size, in_channels * dim_1 * ... * dim_n)}
}
}

\section{\code{self$update_ref()}}{

This function updates the reference input and forwards it through the layer,
updating the output.
\subsection{Usage}{

\code{self$update_ref(x_ref, channels_first = TRUE)}
}

\subsection{Arguments}{

\describe{
\item{\code{x}}{The reference input to be used of shape \emph{(1, in_channels, dim_1, ..., dim_n)}}
\item{\code{channels_first}}{Boolean that determines whether the data format is
\code{channels_first} or \code{channels_last} (default: \code{TRUE})}
}
}

\subsection{Return}{

Returns the output of the forward pass, of dimensions \emph{(1, in_channels * dim_1 * ... * dim_n)}
}
}

\section{\code{self$reshape_to_input()}}{

Reshape the output of the flatten layer to the input dimensions with an
additional dimension at the end.
\subsection{Usage}{

\code{self$reshape_to_input(output)}
}

\subsection{Arguments}{

\describe{
\item{\code{output}}{Torch tensor of size \emph{(batch_size, in_channels * dim_1 * ... * dim_n, model_out)}}
}
}

\subsection{Return}{

Reshapes the torch tensor \code{output} to the input dimension with the \code{model_out} axis
\emph{(batch_size, in_channels, dim_1, ..., dim_n, model_out)}
}
}

